// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package web is a generated GoMock package.
package web

import (
	context "context"
	reflect "reflect"

	create_place "github.com/ffelipelimao/booking/internal/usecases/create_place"
	gomock "github.com/golang/mock/gomock"
)

// MockCreatePlaceUseCase is a mock of CreatePlaceUseCase interface.
type MockCreatePlaceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreatePlaceUseCaseMockRecorder
}

// MockCreatePlaceUseCaseMockRecorder is the mock recorder for MockCreatePlaceUseCase.
type MockCreatePlaceUseCaseMockRecorder struct {
	mock *MockCreatePlaceUseCase
}

// NewMockCreatePlaceUseCase creates a new mock instance.
func NewMockCreatePlaceUseCase(ctrl *gomock.Controller) *MockCreatePlaceUseCase {
	mock := &MockCreatePlaceUseCase{ctrl: ctrl}
	mock.recorder = &MockCreatePlaceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatePlaceUseCase) EXPECT() *MockCreatePlaceUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreatePlaceUseCase) Create(ctx context.Context, InputPlace *create_place.CreatePlaceInputDTO) (*create_place.CreatePlaceOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, InputPlace)
	ret0, _ := ret[0].(*create_place.CreatePlaceOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreatePlaceUseCaseMockRecorder) Create(ctx, InputPlace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreatePlaceUseCase)(nil).Create), ctx, InputPlace)
}
